// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using POC.DomainModel.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace POC.DomainModel.Models
{
    public partial class DemoProjectContext
    {
        private IDemoProjectContextProcedures _procedures;

        public virtual IDemoProjectContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DemoProjectContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDemoProjectContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetProductsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetProductsByIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetProductsByNameResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DemoProjectContextProcedures : IDemoProjectContextProcedures
    {
        private readonly DemoProjectContext _context;

        public DemoProjectContextProcedures(DemoProjectContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetProductsResult>> GetProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProductsResult>("EXEC @returnValue = [dbo].[GetProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetProductsByIdResult>> GetProductsByIdAsync(int? ProductId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = ProductId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProductsByIdResult>("EXEC @returnValue = [dbo].[GetProductsById] @ProductId = @ProductId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetProductsByNameResult>> GetProductsByNameAsync(string SearchName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchName",
                    Size = 200,
                    Value = SearchName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProductsByNameResult>("EXEC @returnValue = [dbo].[GetProductsByName] @SearchName = @SearchName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
