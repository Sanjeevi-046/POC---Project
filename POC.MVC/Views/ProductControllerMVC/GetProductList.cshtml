@model IEnumerable<POC.MVC.Models.ProductModel>
@{
    ViewData["Title"] = "Product";
    int currentPage = int.Parse(ViewBag.CurrentPage) ?? 1;
    int totalPages = int.Parse(ViewBag.TotalPages) ?? 1;
}
<!doctype html>
<html lang="en">
<head>
    <title>Title</title>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>
</head>

<body>
    <div class="position-relative" aria-live="polite" aria-atomic="true">
        <div class="toast-container top-0 end-0 p-3 " role="alert">
            <div class="toast-header" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay='{"show":0,"hide":}'>
                <p>Hello, @ViewBag.UserName</p>
            </div>
        </div>
    </div>

    <section style="background-color: #eee;">

        <div class="container py-5">
            <div class="row">
                <div class="row justify-content-between">
                    <div class="col">
                        <form asp-action="GetProductList" method="get">
                            <div class="input-group mb-3">
                                <input type="text" name="searchName" placeholder="Search products..." value="@ViewBag.searchName" />
                                <button type="submit" class="btn btn-secondary btn-sm">Search</button>
                            </div>
                        </form>
                    </div>
                    <div class="col-5">
                        <div class="col">
                             @* <a asp-action="ExportProductsToExcel" class="btn btn-primary" style="float: inline-end">Download</a> *@
                            <a asp-action="ExportProductsToHtml" class="btn btn-primary" style="float: inline-end">Download</a>
                            @* <button id="downloadBtn" class="btn btn-primary" style="float: inline-end">Download</button> *@
                        </div>
                        <div class="col">
                            <a asp-action="GetCart" asp-controller="CartControllerMVC" class="btn btn-outline-primary" style="float: inline-end">Cart</a>
                        </div>
                    </div>
                </div>
                @foreach (var product in Model)
                {
                    <div class="col-md-12 col-lg-4 mb-4 md-2 mb-lg-0">
                        <div class="card product-card">
                            <img src="data:image;base64,@Convert.ToBase64String(product.ProductImage)"
                                 class="rounded mx-auto d-block" alt="Mobiles" style="height: 250px;width: 250px;" />

                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <p class="small"><a href="#!" class="text-muted">Mobiles</a></p>
                                </div>

                                <div class="d-flex justify-content-between mb-3">
                                    <h5 class="mb-0 product-name">@product.Name</h5>
                                    <h5 class="text-dark mb-0 product-price"> @product.Price.ToString("C")</h5>
                                </div>

                                <div class="row justify-content-between">
                                    <div class="col-5">
                                        <form asp-controller="CartControllerMVC" asp-action="AddCart" method="post">
                                            <input type="hidden" name="UserId" value="@int.Parse(ViewBag.UserId)" />
                                            <input type="hidden" name="ProductId" value="@product.ProductId" />
                                            <button type="button" class="btn btn-outline-secondary">Add To Cart</button>
                                        </form>

                                    </div>
                                    <div class="col-4">
                                        <a asp-action="GetProductDetail" asp-controller="ProductControllerMVC" asp-route-id="@product.ProductId" class="btn btn-outline-primary">Order Now</a>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div style="justify-content:center">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination">
                            @if (currentPage > 1)
                            {
                                <li class="page-item">
                                    @Html.ActionLink("« Previous", "GetProductList", new { page = currentPage - 1, searchName = @ViewBag.searchName }, new { @class = "page-link" })
                                </li>
                            }
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    @Html.ActionLink(i.ToString(), "GetProductList", new { page = i, searchName = @ViewBag.searchName }, new { @class = "page-link" })
                                </li>
                            }
                            @if (currentPage < totalPages)
                            {
                                <li class="page-item">
                                    @Html.ActionLink("Next »", "GetProductList", new { page = currentPage + 1, searchName = @ViewBag.searchName }, new { @class = "page-link" })
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('downloadBtn').addEventListener('click', function () {
                // Extract product data from HTML
                const products = Array.from(document.querySelectorAll('.product-card')).map(card => {
                    return {
                        Name: card.querySelector('.product-name').textContent,
                        Price: card.querySelector('.product-price').textContent.replace('$', '')
                    };
                });

                // Create a new workbook and add a worksheet
                const wb = XLSX.utils.book_new();
                const ws = XLSX.utils.json_to_sheet(products);

                // Append the worksheet to the workbook
                XLSX.utils.book_append_sheet(wb, ws, 'Products');

                // Generate the Excel file and trigger download
                const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
                const blob = new Blob([stringToArray(wbout)], { type: 'application/octet-stream' });

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'products.xlsx';
                link.click();
            });

            // Helper function to convert string to array buffer
            function stringToArray(s) {
                const buf = new ArrayBuffer(s.length);
                const view = new Uint8Array(buf);
                for (let i = 0; i < s.length; i++) {
                    view[i] = s.charCodeAt(i) & 0xFF;
                }
                return buf;
            }
        });
    </script>

</body>
</html>